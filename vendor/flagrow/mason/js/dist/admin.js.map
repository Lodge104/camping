{"version":3,"sources":["webpack://@flagrow/mason/webpack/bootstrap","webpack://@flagrow/mason/external \"flarum.core.compat['app']\"","webpack://@flagrow/mason/external \"flarum.core.compat['Model']\"","webpack://@flagrow/mason/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@flagrow/mason/external \"flarum.core.compat['Component']\"","webpack://@flagrow/mason/external \"flarum.core.compat['extend']\"","webpack://@flagrow/mason/external \"flarum.core.compat['helpers/icon']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/Button']\"","webpack://@flagrow/mason/./src/lib/helpers/sortByAttribute.js","webpack://@flagrow/mason/external \"flarum.core.compat['components/Switch']\"","webpack://@flagrow/mason/external \"flarum.core.compat['utils/mixin']\"","webpack://@flagrow/mason/external \"flarum.core.compat['utils/ItemList']\"","webpack://@flagrow/mason/./src/lib/models/Answer.js","webpack://@flagrow/mason/external \"flarum.core.compat['utils/computed']\"","webpack://@flagrow/mason/./src/lib/models/Field.js","webpack://@flagrow/mason/external \"flarum.core.compat['components/AdminNav']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/AdminLinkButton']\"","webpack://@flagrow/mason/external \"flarum.core.compat['utils/saveSettings']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/Select']\"","webpack://@flagrow/mason/external \"flarum.core.compat['components/PermissionGrid']\"","webpack://@flagrow/mason/./src/admin/components/AnswerEdit.js","webpack://@flagrow/mason/./src/admin/components/FieldAnswersEdit.js","webpack://@flagrow/mason/./src/admin/components/FieldEdit.js","webpack://@flagrow/mason/./src/admin/components/MasonSettings.js","webpack://@flagrow/mason/./src/admin/panes/MasonFieldsPane.js","webpack://@flagrow/mason/./src/admin/index.js","webpack://@flagrow/mason/./src/admin/addMasonFieldsPane.js","webpack://@flagrow/mason/./src/admin/addPermissions.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","__webpack_exports__","items","attr","sort","a","b","Answer","apiEndpoint","this","exists","data","id","mixin","Model","content","attribute","is_suggested","field","hasOne","Field","description","min_answers_count","max_answers_count","show_when_empty","user_values_allowed","validation","icon","deleted_at","transformDate","all_answers","hasMany","suggested_answers","required","computed","multiple","FieldEdit","init","answer","props","dirty","processing","view","_this","onclick","newContent","prompt","updateAttribute","Switch","component","state","onchange","saveAnswer","children","app","translator","trans","Button","type","className","loading","disabled","readyToSave","deleteAnswer","_this$answer$pushAttr","pushAttributes","_this2","save","attributes","then","redraw","err","_this3","confirm","Component","FieldAnswersEdit","new_content","showUserAnswers","config","$","sortable","handle","on","sorting","map","updateSort","suggestedAnswers","userAnswers","forEach","push","sortByAttribute","data-id","AnswerEdit","length","count","oninput","withAttr","placeholder","saveField","request","method","url","forum","result","store","pushPayload","toggleFields","initNewField","createRecord","boxTitle","viewFields","iconPreview","deleteField","_this$field$pushAttri","createNewRecord","_this4","preview","MasonSettings","fieldsSectionTitle","prop","settings","columnCount","labelsAsPlaceholders","fieldsInHero","hideEmptyFieldsSection","tagsAsFields","tagsFieldName","columnOptions","updateSetting","Select","options","setting","_saveSettings","saveSettings","MasonFieldsPane","fields","all","fieldsList","initializers","add","models","routes","path","extensionSettings","route","extend","AdminNav","AdminLinkButton","href","PermissionGrid","groups","ItemList","label","permission","allowGuest","toArray"],"mappings":"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","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/Button'];","export default function (items, attr = 'sort') {\n    return items.sort(\n        (a, b) => a[attr]() - b[attr]()\n    );\n}\n","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['utils/mixin'];","module.exports = flarum.core.compat['utils/ItemList'];","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class Answer extends mixin(Model, {\n    content: Model.attribute('content'),\n    is_suggested: Model.attribute('is_suggested'),\n    sort: Model.attribute('sort'),\n    field: Model.hasOne('field'),\n}) {\n    /**\n     * @inheritDoc\n     */\n    apiEndpoint() {\n        return '/flagrow/mason/answers' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['utils/computed'];","import app from 'flarum/app';\nimport Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\nimport computed from 'flarum/utils/computed';\n\nexport default class Field extends mixin(Model, {\n    name: Model.attribute('name'),\n    description: Model.attribute('description'),\n    min_answers_count: Model.attribute('min_answers_count'),\n    max_answers_count: Model.attribute('max_answers_count'),\n    show_when_empty: Model.attribute('show_when_empty'),\n    user_values_allowed: Model.attribute('user_values_allowed'),\n    validation: Model.attribute('validation'),\n    icon: Model.attribute('icon'),\n    sort: Model.attribute('sort'),\n    deleted_at: Model.attribute('deleted_at', Model.transformDate),\n    all_answers: Model.hasMany('all_answers'),\n    suggested_answers: Model.hasMany('suggested_answers'),\n    required: computed('min_answers_count', min_answers_count => min_answers_count > 0),\n    multiple: computed('max_answers_count', max_answers_count => max_answers_count > 1),\n}) {\n    /**\n     * @inheritDoc\n     */\n    apiEndpoint() {\n        return '/flagrow/mason/fields' + (this.exists ? '/' + this.data.id : '');\n    }\n}\n","module.exports = flarum.core.compat['components/AdminNav'];","module.exports = flarum.core.compat['components/AdminLinkButton'];","module.exports = flarum.core.compat['utils/saveSettings'];","module.exports = flarum.core.compat['components/Select'];","module.exports = flarum.core.compat['components/PermissionGrid'];","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport Switch from 'flarum/components/Switch';\n\nexport default class FieldEdit extends Component {\n    init() {\n        this.answer = this.props.answer;\n        this.dirty = false;\n        this.processing = false;\n    }\n\n    view() {\n        return m('form.Mason-Box', [\n            // Only suggested answers can be reordered\n            (this.answer.is_suggested() ? [\n                m('span.fa.fa-arrows.Mason-Box--handle.js-answer-handle'),\n                ' ',\n            ] : null),\n            m('span', {\n                onclick: () => {\n                    const newContent = prompt('Edit content', this.answer.content());\n\n                    if (newContent) {\n                        this.updateAttribute('content', newContent);\n                    }\n                },\n            }, [\n                this.answer.content(),\n                ' ',\n                icon('fas fa-pen'),\n            ]),\n            Switch.component({\n                state: this.answer.is_suggested(),\n                onchange: value => {\n                    this.updateAttribute('is_suggested', value);\n\n                    // Save right away, because updating the model with immediately trigger a redraw of the UI\n                    // And the unsaved state won't be preserved because the AnswerEdit component changes its place\n                    this.saveAnswer();\n                },\n                children: app.translator.trans('flagrow-mason.admin.fields.is_suggested'),\n            }),\n            m('.ButtonGroup', [\n                Button.component({\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                    children: app.translator.trans('flagrow-mason.admin.buttons.save-answer'),\n                    loading: this.processing,\n                    disabled: !this.readyToSave(),\n                    onclick: this.saveAnswer.bind(this),\n                }),\n                Button.component({\n                    type: 'submit',\n                    className: 'Button Button--danger',\n                    children: app.translator.trans('flagrow-mason.admin.buttons.delete-answer'),\n                    loading: this.processing,\n                    onclick: this.deleteAnswer.bind(this),\n                }),\n            ]),\n        ]);\n    }\n\n    updateAttribute(attribute, value) {\n        this.answer.pushAttributes({\n            [attribute]: value,\n        });\n\n        this.dirty = true;\n    }\n\n    readyToSave() {\n        return this.dirty;\n    }\n\n    saveAnswer() {\n        this.processing = true;\n\n        this.answer.save(this.answer.data.attributes).then(() => {\n            this.processing = false;\n            this.dirty = false;\n\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n\n            throw err;\n        });\n    }\n\n    deleteAnswer() {\n        if (!confirm(app.translator.trans('flagrow-mason.admin.messages.delete-answer-confirmation', {\n                content: this.answer.content(),\n            }))) {\n            return;\n        }\n\n        this.processing = true;\n\n        this.answer.delete().then(() => {\n            this.processing = false;\n\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n\n            throw err;\n        });\n    }\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport AnswerEdit from './AnswerEdit';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\n\nexport default class FieldAnswersEdit extends Component {\n    init() {\n        this.field = this.props.field;\n        this.processing = false;\n        this.new_content = '';\n        this.showUserAnswers = false;\n    }\n\n    config() {\n        this.$('.js-answers-container')\n            .sortable({\n                handle: '.js-answer-handle',\n            })\n            .on('sortupdate', () => {\n                const sorting = this.$('.js-answer-data')\n                    .map(function () {\n                        return $(this).data('id');\n                    })\n                    .get();\n\n                this.updateSort(sorting);\n            });\n    }\n\n    view() {\n        if (!this.field.exists) {\n            return m('div', app.translator.trans('flagrow-mason.admin.fields.save-field-for-answers'));\n        }\n\n        let suggestedAnswers = [];\n        let userAnswers = [];\n\n        this.field.all_answers()\n            .forEach(answer => {\n                // When answers are deleted via store.delete() they stay as an \"undefined\" relationship\n                // We ignore these deleted answers\n                if (typeof answer === 'undefined') {\n                    return;\n                }\n\n                if (answer.is_suggested()) {\n                    suggestedAnswers.push(answer);\n                } else {\n                    userAnswers.push(answer);\n                }\n            });\n\n        return m('div', [\n            m('.Mason-Container.js-answers-container', sortByAttribute(suggestedAnswers).map(\n                answer => m('.js-answer-data', {\n                    key: answer.id(),\n                    'data-id': answer.id(),\n                }, AnswerEdit.component({\n                    answer,\n                }))\n            )),\n            (userAnswers.length ? [\n                m('.Button.Button--block.Mason-Box-Header', {\n                    onclick: () => {\n                        this.showUserAnswers = !this.showUserAnswers;\n                    },\n                }, [\n                    m('.Mason-Box-Header-Title', app.translator.trans('flagrow-mason.admin.buttons.show-user-answers', {\n                        count: userAnswers.length,\n                    })),\n                    m('div', [\n                        icon('fas fa-chevron-' + (this.showUserAnswers ? 'up' : 'down')),\n                    ]),\n                ]),\n                // The list of user answers can't be re-ordered\n                (this.showUserAnswers ? m('.Mason-Container', sortByAttribute(userAnswers, 'content').map(\n                    answer => m('div', {\n                        key: answer.id(),\n                    }, AnswerEdit.component({\n                        answer,\n                    }))\n                )) : null),\n            ] : null),\n            m('form', [\n                m('.Form-group', [\n                    m('label', 'New answer'),\n                    m('input.FormControl', {\n                        value: this.new_content,\n                        oninput: m.withAttr('value', value => {\n                            this.new_content = value;\n                        }),\n                        placeholder: app.translator.trans('flagrow-mason.admin.fields.new-answer-placeholder'),\n                    }),\n                ]),\n                m('.Form-group', [\n                    Button.component({\n                        type: 'submit',\n                        className: 'Button Button--primary',\n                        children: app.translator.trans('flagrow-mason.admin.buttons.add-answer'),\n                        loading: this.processing,\n                        disabled: !this.new_content,\n                        onclick: this.saveField.bind(this),\n                    }),\n                ]),\n            ]),\n        ]);\n    }\n\n    saveField() {\n        this.processing = true;\n\n        app.request({\n            method: 'POST',\n            url: app.forum.attribute('apiUrl') + this.field.apiEndpoint() + '/answers',\n            data: {\n                data: {\n                    attributes: {\n                        content: this.new_content,\n                        is_suggested: true,\n                    },\n                },\n            },\n        }).then(result => {\n            app.store.pushPayload(result);\n\n            this.new_content = '';\n            this.processing = false;\n            m.redraw();\n        });\n    }\n\n    updateSort(sorting) {\n        app.request({\n            method: 'POST',\n            url: app.forum.attribute('apiUrl') + this.field.apiEndpoint() + '/answers/order',\n            data: {\n                sort: sorting,\n            },\n        }).then(result => {\n            // Update sort attributes\n            app.store.pushPayload(result);\n            m.redraw();\n        });\n    }\n}\n","import app from 'flarum/app';\nimport icon from 'flarum/helpers/icon';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport Switch from 'flarum/components/Switch';\nimport FieldAnswersEdit from './FieldAnswersEdit';\n\nexport default class FieldEdit extends Component {\n    init() {\n        this.field = this.props.field;\n        this.dirty = false;\n        this.processing = false;\n        this.toggleFields = false;\n\n        if (this.field === null) {\n            this.initNewField();\n        }\n    }\n\n    initNewField() {\n        this.field = app.store.createRecord('flagrow-mason-field', {\n            attributes: {\n                name: '',\n                description: '',\n                min_answers_count: 0,\n                max_answers_count: 1,\n                user_values_allowed: false,\n                show_when_empty: false,\n                validation: '',\n                icon: '',\n            },\n        });\n    }\n\n    boxTitle() {\n        if (this.field.exists) {\n            return this.field.name();\n        }\n\n        return app.translator.trans('flagrow-mason.admin.buttons.new-field');\n    }\n\n    view() {\n        return m('.Mason-Box', [\n            (this.field.exists ? m('span.fa.fa-arrows.Mason-Box--handle.js-field-handle') : null),\n            m('.Button.Button--block.Mason-Box-Header', {\n                onclick: () => {\n                    this.toggleFields = !this.toggleFields;\n                },\n            }, [\n                m('.Mason-Box-Header-Title', this.boxTitle()),\n                m('div', [\n                    (this.field.exists ? [\n                        app.translator.trans('flagrow-mason.admin.buttons.edit-field'),\n                        ' ',\n                    ] : null),\n                    icon('fas fa-chevron-' + (this.toggleFields ? 'up' : 'down')),\n                ]),\n            ]),\n            (this.toggleFields ? this.viewFields() : null),\n        ]);\n    }\n\n    viewFields() {\n        return m('form', [\n            m('.Mason-Box--row', [\n                m('.Mason-Box--column', [\n                    m('h4', 'Field settings'),\n                    m('.Form-group', [\n                        m('label', app.translator.trans('flagrow-mason.admin.fields.name')),\n                        m('input.FormControl', {\n                            value: this.field.name(),\n                            oninput: m.withAttr('value', this.updateAttribute.bind(this, 'name')),\n                        }),\n                        m('.helpText', app.translator.trans('flagrow-mason.admin.fields.name-help')),\n                    ]),\n                    m('.Form-group', [\n                        m('label', app.translator.trans('flagrow-mason.admin.fields.description')),\n                        m('input.FormControl', {\n                            value: this.field.description(),\n                            oninput: m.withAttr('value', this.updateAttribute.bind(this, 'description')),\n                        }),\n                        m('.helpText', app.translator.trans('flagrow-mason.admin.fields.description-help')),\n                    ]),\n                    m('.Form-group', [\n                        m('label', [\n                            // TODO: while multiple answers are still in the work, show the \"min answers\" field as a checkbox\n                            Switch.component({\n                                state: this.field.min_answers_count() === 1,\n                                onchange: value => {\n                                    this.updateAttribute('min_answers_count', value ? 1 : 0);\n                                },\n                                children: app.translator.trans('flagrow-mason.admin.fields.required'),\n                            }),\n                        ]),\n                    ]),\n                    /*m('.Form-group', [\n                        m('label', app.translator.trans('flagrow-mason.admin.fields.min_answers_count')),\n                        m('input.FormControl', {\n                            type: 'number',\n                            min: 0,\n                            max: 1, // TODO: remove when multiple answers is ready\n                            value: this.field.min_answers_count(),\n                            oninput: m.withAttr('value', this.updateAttribute.bind(this, 'min_answers_count')),\n                        }),\n                    ]),\n                    m('.Form-group', [\n                        m('label', app.translator.trans('flagrow-mason.admin.fields.max_answers_count')),\n                        m('input.FormControl', {\n                            type: 'number',\n                            min: 1,\n                            disabled: true, // TODO: remove when multiple answers is ready\n                            value: this.field.max_answers_count(),\n                            oninput: m.withAttr('value', this.updateAttribute.bind(this, 'max_answers_count')),\n                        }),\n                    ]),*/\n                    m('.Form-group', [\n                        m('label', [\n                            Switch.component({\n                                state: this.field.show_when_empty(),\n                                onchange: this.updateAttribute.bind(this, 'show_when_empty'),\n                                children: app.translator.trans('flagrow-mason.admin.fields.show_when_empty'),\n                            }),\n                        ]),\n                        m('.helpText', app.translator.trans('flagrow-mason.admin.fields.show_when_empty-help')),\n                    ]),\n                    m('.Form-group', [\n                        m('label', [\n                            Switch.component({\n                                state: this.field.user_values_allowed(),\n                                onchange: this.updateAttribute.bind(this, 'user_values_allowed'),\n                                children: app.translator.trans('flagrow-mason.admin.fields.user_values_allowed'),\n                            }),\n                        ]),\n                        m('.helpText', app.translator.trans('flagrow-mason.admin.fields.user_values_allowed-help')),\n                    ]),\n                    m('.Form-group', [\n                        m('label', app.translator.trans('flagrow-mason.admin.fields.validation')),\n                        m('input.FormControl', {\n                            disabled: !this.field.user_values_allowed(),\n                            placeholder: this.field.user_values_allowed() ? '' : app.translator.trans('flagrow-mason.admin.fields.enable-user-values-for-validation'),\n                            value: this.field.validation(),\n                            oninput: m.withAttr('value', this.updateAttribute.bind(this, 'validation')),\n                        }),\n                        m('.helpText', app.translator.trans('flagrow-mason.admin.fields.validation-help', {\n                            a: m('a[href=https://laravel.com/docs/5.1/validation#available-validation-rules][_target=blank]'),\n                        })),\n                    ]),\n                    m('.Form-group', [\n                        m('label', [\n                            app.translator.trans('flagrow-mason.admin.fields.icon'),\n                            this.iconPreview(this.field.icon()),\n                        ]),\n                        m('input.FormControl', {\n                            value: this.field.icon(),\n                            oninput: m.withAttr('value', this.updateAttribute.bind(this, 'icon')),\n                        }),\n                        m('.helpText', app.translator.trans('flagrow-mason.admin.fields.icon-help', {\n                            a: m('a[href=https://fontawesome.com/icons?m=free][_target=blank]'),\n                        })),\n                    ]),\n                ]),\n                m('.Mason-Box--column', [\n                    m('h4', 'Field answers'),\n                    m('.Form-group', FieldAnswersEdit.component({\n                        field: this.field,\n                    })),\n                ]),\n            ]),\n            m('li.ButtonGroup', [\n                Button.component({\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                    children: app.translator.trans('flagrow-mason.admin.buttons.' + (this.field.exists ? 'save' : 'add') + '-field'),\n                    loading: this.processing,\n                    disabled: !this.readyToSave(),\n                    onclick: this.saveField.bind(this),\n                }),\n                (this.field.exists ? Button.component({\n                    type: 'submit',\n                    className: 'Button Button--danger',\n                    children: app.translator.trans('flagrow-mason.admin.buttons.delete-field'),\n                    loading: this.processing,\n                    onclick: this.deleteField.bind(this),\n                }) : ''),\n            ]),\n        ]);\n    }\n\n    updateAttribute(attribute, value) {\n        this.field.pushAttributes({\n            [attribute]: value,\n        });\n\n        this.dirty = true;\n    }\n\n    readyToSave() {\n        // TODO: check required fields\n        return this.dirty;\n    }\n\n    saveField() {\n        this.processing = true;\n\n        const createNewRecord = !this.field.exists;\n\n        this.field.save(this.field.data.attributes).then(() => {\n            if (createNewRecord) {\n                this.initNewField();\n                this.toggleFields = false;\n            }\n\n            this.processing = false;\n            this.dirty = false;\n\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n\n            throw err;\n        });\n    }\n\n    deleteField() {\n        if (!confirm(app.translator.trans('flagrow-mason.admin.messages.delete-field-confirmation', {\n                name: this.field.name(),\n            }))) {\n            return;\n        }\n\n        this.processing = true;\n\n        this.field.delete().then(() => {\n            this.processing = false;\n\n            m.redraw();\n        }).catch(err => {\n            this.processing = false;\n\n            throw err;\n        });\n    }\n\n    iconPreview(value) {\n        if (!value) {\n            return '';\n        }\n\n        return [\n            ' (',\n            app.translator.trans('flagrow-mason.admin.fields.icon-preview', {\n                preview: icon(value),\n            }),\n            ')',\n        ];\n    }\n}\n","import app from 'flarum/app';\nimport saveSettings from \"flarum/utils/saveSettings\";\nimport Component from 'flarum/Component';\nimport Select from 'flarum/components/Select';\nimport Switch from 'flarum/components/Switch';\n\nexport default class MasonSettings extends Component {\n    init() {\n        this.fieldsSectionTitle = m.prop(app.data.settings['flagrow.mason.fields-section-title'] || '');\n        this.columnCount = m.prop(app.data.settings['flagrow.mason.column-count'] || 1);\n        this.labelsAsPlaceholders = m.prop(app.data.settings['flagrow.mason.labels-as-placeholders'] > 0);\n        this.fieldsInHero = m.prop(app.data.settings['flagrow.mason.fields-in-hero'] > 0);\n        this.hideEmptyFieldsSection = m.prop(app.data.settings['flagrow.mason.hide-empty-fields-section'] > 0);\n        this.tagsAsFields = m.prop(app.data.settings['flagrow.mason.tags-as-fields'] > 0);\n        this.tagsFieldName = m.prop(app.data.settings['flagrow.mason.tags-field-name'] || '');\n\n        this.columnOptions = {};\n\n        for (let i = 1; i <= 3; i++) {\n            this.columnOptions[i] = app.translator.trans('flagrow-mason.admin.settings.n-columns', {count: i});\n        }\n    }\n\n    view() {\n        return m('.Mason-Container', [\n            m('.Form-group', [\n                m('label', app.translator.trans('flagrow-mason.admin.settings.fields-section-title')),\n                m('input.FormControl', {\n                    value: this.fieldsSectionTitle(),\n                    placeholder: app.translator.trans('flagrow-mason.admin.settings.fields-section-title-placeholder'),\n                    onchange: m.withAttr('value', this.updateSetting.bind(this, this.fieldsSectionTitle, 'flagrow.mason.fields-section-title')),\n                }),\n                m('.helpText', app.translator.trans('flagrow-mason.admin.settings.fields-section-title-help')),\n            ]),\n            m('.Form-group', [\n                m('label', app.translator.trans('flagrow-mason.admin.settings.column-count')),\n                Select.component({\n                    options: this.columnOptions,\n                    value: this.columnCount(),\n                    onchange: this.updateSetting.bind(this, this.columnCount, 'flagrow.mason.column-count'),\n                }),\n            ]),\n            m('.Form-group', [\n                m('label', Switch.component({\n                    state: this.labelsAsPlaceholders(),\n                    onchange: this.updateSetting.bind(this, this.labelsAsPlaceholders, 'flagrow.mason.labels-as-placeholders'),\n                    children: app.translator.trans('flagrow-mason.admin.settings.labels-as-placeholders'),\n                })),\n                m('.helpText', app.translator.trans('flagrow-mason.admin.settings.labels-as-placeholders-help')),\n            ]),\n            m('.Form-group', [\n                m('label', Switch.component({\n                    state: this.fieldsInHero(),\n                    onchange: this.updateSetting.bind(this, this.fieldsInHero, 'flagrow.mason.fields-in-hero'),\n                    children: app.translator.trans('flagrow-mason.admin.settings.fields-in-hero'),\n                })),\n            ]),\n            m('.Form-group', [\n                m('label', Switch.component({\n                    state: this.hideEmptyFieldsSection(),\n                    onchange: this.updateSetting.bind(this, this.hideEmptyFieldsSection, 'flagrow.mason.hide-empty-fields-section'),\n                    children: app.translator.trans('flagrow-mason.admin.settings.hide-empty-fields-section'),\n                })),\n                m('.helpText', app.translator.trans('flagrow-mason.admin.settings.hide-empty-fields-section-help')),\n            ]),\n            m('.Form-group', [\n                m('label', Switch.component({\n                    state: this.tagsAsFields(),\n                    onchange: this.updateSetting.bind(this, this.tagsAsFields, 'flagrow.mason.tags-as-fields'),\n                    children: app.translator.trans('flagrow-mason.admin.settings.tags-as-field'),\n                })),\n                m('.helpText', app.translator.trans('flagrow-mason.admin.settings.tags-as-field-help')),\n            ]),\n            (this.tagsAsFields() ? m('.Form-group', [\n                m('label', app.translator.trans('flagrow-mason.admin.settings.tags-field-name')),\n                m('input.FormControl', {\n                    value: this.tagsFieldName(),\n                    placeholder: app.translator.trans('flagrow-mason.admin.settings.tags-field-name-placeholder'),\n                    onchange: m.withAttr('value', this.updateSetting.bind(this, this.tagsFieldName, 'flagrow.mason.tags-field-name')),\n                }),\n            ]) : null),\n        ]);\n    }\n\n    /**\n     * Updates setting in database.\n     * @param prop\n     * @param setting\n     * @param value\n     */\n    updateSetting(prop, setting, value) {\n        saveSettings({\n            [setting]: value\n        });\n\n        prop(value)\n    }\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport FieldEdit from './../components/FieldEdit';\nimport sortByAttribute from './../../lib/helpers/sortByAttribute';\nimport MasonSettings from './../components/MasonSettings';\n\nexport default class MasonFieldsPane extends Component {\n    init() {\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + '/flagrow/mason/fields',\n        }).then(result => {\n            app.store.pushPayload(result);\n            m.redraw();\n        });\n    }\n\n    config() {\n        this.$('.js-fields-container')\n            .sortable({\n                handle: '.js-field-handle',\n            })\n            .on('sortupdate', () => {\n                const sorting = this.$('.js-field-data')\n                    .map(function () {\n                        return $(this).data('id');\n                    })\n                    .get();\n\n                this.updateSort(sorting);\n            });\n    }\n\n    view() {\n        const fields = app.store.all('flagrow-mason-field');\n\n        let fieldsList = [];\n\n        sortByAttribute(fields)\n            .forEach(field => {\n                // Build array of fields to show.\n                fieldsList.push(m('.js-field-data', {\n                    key: field.id(),\n                    'data-id': field.id(),\n                }, FieldEdit.component({\n                    field,\n                })));\n            });\n\n        return m('.container', [\n            m('h2', app.translator.trans('flagrow-mason.admin.titles.fields')),\n            m('.Mason-Container', [\n                m('.js-fields-container', fieldsList),\n                FieldEdit.component({\n                    key: 'new',\n                    field: null,\n                }),\n            ]),\n            m('h2', app.translator.trans('flagrow-mason.admin.titles.settings')),\n            MasonSettings.component(),\n        ]);\n    }\n\n    updateSort(sorting) {\n        app.request({\n            method: 'POST',\n            url: app.forum.attribute('apiUrl') + '/flagrow/mason/fields/order',\n            data: {\n                sort: sorting,\n            },\n        }).then(result => {\n            // Update sort attributes\n            app.store.pushPayload(result);\n            m.redraw();\n        });\n    }\n}\n","import app from 'flarum/app';\nimport Answer from './../lib/models/Answer';\nimport Field from './../lib/models/Field';\nimport addMasonFieldsPane from './addMasonFieldsPane';\nimport addPermissions from './addPermissions';\n\napp.initializers.add('flagrow-mason', app => {\n    app.store.models['flagrow-mason-field'] = Field;\n    app.store.models['flagrow-mason-answer'] = Answer;\n\n    addMasonFieldsPane();\n    addPermissions();\n});\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport AdminNav from 'flarum/components/AdminNav';\nimport AdminLinkButton from 'flarum/components/AdminLinkButton';\nimport MasonFieldsPane from './panes/MasonFieldsPane';\n\nexport default function () {\n    // create the route\n    app.routes['flagrow-mason-fields'] = {\n        path: '/flagrow/mason',\n        component: MasonFieldsPane.component(),\n    };\n\n    // bind the route we created to the three dots settings button\n    app.extensionSettings['flagrow-mason'] = () => m.route(app.route('flagrow-mason-fields'));\n\n    extend(AdminNav.prototype, 'items', items => {\n        // add the Image Upload tab to the admin navigation menu\n        items.add('flagrow-mason-fields', AdminLinkButton.component({\n            href: app.route('flagrow-mason-fields'),\n            icon: 'fas fa-dungeon',\n            children: 'Mason',\n            description: app.translator.trans('flagrow-mason.admin.menu.description'),\n        }));\n    });\n}\n","import {extend} from 'flarum/extend';\nimport app from 'flarum/app';\nimport ItemList from 'flarum/utils/ItemList';\nimport PermissionGrid from 'flarum/components/PermissionGrid';\n\nexport default function () {\n    extend(PermissionGrid.prototype, 'permissionItems', groups => {\n        const items = new ItemList();\n\n        items.add('see-own-fields', {\n            icon: 'fas fa-eye',\n            label: app.translator.trans('flagrow-mason.admin.permissions.see-own-fields'),\n            permission: 'flagrow.mason.see-own-fields',\n        });\n        items.add('see-other-fields', {\n            icon: 'fas fa-eye',\n            label: app.translator.trans('flagrow-mason.admin.permissions.see-other-fields'),\n            permission: 'flagrow.mason.see-other-fields',\n            allowGuest: true,\n        });\n        items.add('fill-fields', {\n            icon: 'fas fa-tasks',\n            label: app.translator.trans('flagrow-mason.admin.permissions.fill-fields'),\n            permission: 'flagrow.mason.fill-fields',\n        });\n        items.add('update-own-fields', {\n            icon: 'fas fa-edit',\n            label: app.translator.trans('flagrow-mason.admin.permissions.update-own-fields'),\n            permission: 'flagrow.mason.update-own-fields',\n        });\n        items.add('update-other-fields', {\n            icon: 'fas fa-edit',\n            label: app.translator.trans('flagrow-mason.admin.permissions.update-other-fields'),\n            permission: 'flagrow.mason.update-other-fields',\n            allowGuest: true,\n        });\n        items.add('skip-required-fields', {\n            icon: 'fas fa-forward',\n            label: app.translator.trans('flagrow-mason.admin.permissions.skip-required-fields'),\n            permission: 'flagrow.mason.skip-required-fields',\n        });\n\n        groups.add('flagrow-mason', {\n            label: app.translator.trans('flagrow-mason.admin.permissions.mason-heading'),\n            children: items.toArray(),\n        });\n    });\n}\n"],"sourceRoot":""}